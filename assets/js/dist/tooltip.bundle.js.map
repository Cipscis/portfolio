{"version":3,"sources":["webpack://Portfolio/./node_modules/keybinding/KeyBind.js","webpack://Portfolio/./node_modules/keybinding/KeyPress.js","webpack://Portfolio/./node_modules/keybinding/keybinding.js","webpack://Portfolio/./app/assets/js/src/tooltip/tooltip.js"],"names":["KeyBind","Array","bindingString","RangeError","super","bindings","trim","split","binding","this","push","join","keyPresses","length","i","keyPress","entries","keyBind","match","Patterns","Object","freeze","alt","ctrl","shift","Aliases","KeyPress","options","key","modifiers","altKey","ctrlKey","metaKey","shiftKey","keyString","requiredModifiers","test","replace","modifier","toLowerCase","Map","defaults","allowInInput","createFnWrapper","fn","opts","assign","keyLog","e","includes","isInput","document","activeElement","isProtected","splice","apply","arguments","$element","nodeName","inputType","attributes","type","value","isContentEditable","selectors","classes","initialised","module","init","_initEvents","_initKeybinding","querySelectorAll","forEach","$tooltip","addEventListener","_removeHiddenClassEvent","_processTooltipFocusOut","has","set","keyStringBindings","get","fnWrapper","_hideOpenTooltips","_getOpenTooltips","classList","add","_removeHiddenClass","remove","window","setTimeout","$oldFocus","target","$newFocus","$oldTooltip","_getClosestTooltip","$openBodies","_getOpenTooltipBodies","$tooltips","$el","console","error","$bodies","from","filter","offsetParent","matches","parentElement"],"mappings":"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","file":"tooltip.bundle.js","sourcesContent":["class KeyBind extends Array {\r\n\tconstructor(bindingString) {\r\n\t\tif (!(typeof bindingString === 'string')) {\r\n\t\t\tthrow new RangeError(`KeyBind: Constructor argument must be a string`);\r\n\t\t}\r\n\r\n\t\tsuper(0);\r\n\r\n\t\tconst bindings = bindingString.trim().split(/\\s+/g);\r\n\r\n\t\tfor (const binding of bindings) {\r\n\t\t\tthis.push(binding);\r\n\t\t}\r\n\t}\r\n\r\n\ttoString() {\r\n\t\treturn this.join(' ');\r\n\t}\r\n\r\n\tmatch(keyPresses) {\r\n\t\tif (keyPresses.length !== this.length) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\tfor (const [i, keyPress] of keyPresses.entries()) {\r\n\t\t\tconst keyBind = this[i];\r\n\r\n\t\t\tif (!keyPress.match(keyBind)) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn true;\r\n\t}\r\n}\r\n\r\nexport { KeyBind };\r\n","const Patterns = Object.freeze({\r\n\talt: /\\balt\\+/g,\r\n\tctrl: /\\b(control|ctrl|command|cmd|meta)\\+/g,\r\n\tshift: /\\bshift\\+/g,\r\n});\r\n\r\nconst Aliases = Object.freeze({\r\n\t'space': ' ',\r\n\t'spacebar': ' ',\r\n\r\n\t'up': 'arrowup',\r\n\t'right': 'arrowright',\r\n\t'down': 'arrowdown',\r\n\t'left': 'arrowleft',\r\n\r\n\t'esc': 'escape',\r\n});\r\n\r\nclass KeyPress {\r\n\tconstructor(options) {\r\n\t\tif (!('key' in options)) {\r\n\t\t\tthrow new RangeError(`KeyPress: key is a required option`);\r\n\t\t}\r\n\t\tthis.key = options.key;\r\n\t\tthis.modifiers = {\r\n\t\t\taltKey: options.altKey || false,\r\n\t\t\tctrlKey: options.metaKey || options.ctrlKey || false,\r\n\t\t\tshiftKey: options.shiftKey || false,\r\n\t\t};\r\n\t}\r\n\r\n\tmatch(keyString) {\r\n\t\tconst requiredModifiers = {\r\n\t\t\taltKey: false,\r\n\t\t\tctrlKey: false,\r\n\t\t\tshiftKey: false,\r\n\t\t};\r\n\r\n\t\t// Gather required modifiers for keyString\r\n\t\tif (Patterns.alt.test(keyString)) {\r\n\t\t\trequiredModifiers.altKey = true;\r\n\t\t\tkeyString = keyString.replace(Patterns.alt, '');\r\n\t\t}\r\n\r\n\t\tif (Patterns.ctrl.test(keyString)) {\r\n\t\t\trequiredModifiers.ctrlKey = true;\r\n\t\t\tkeyString = keyString.replace(Patterns.ctrl, '');\r\n\t\t}\r\n\r\n\t\tif (Patterns.shift.test(keyString)) {\r\n\t\t\trequiredModifiers.shiftKey = true;\r\n\t\t\tkeyString = keyString.replace(Patterns.shift, '');\r\n\t\t}\r\n\r\n\t\t// Check if all keyString's required modifiers were met\r\n\t\tfor (const modifier in requiredModifiers) {\r\n\t\t\tif (requiredModifiers[modifier] && !this.modifiers[modifier]) {\r\n\t\t\t\t// The modifier was required but not recorded\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Check if they keyString's key matches the key pressed\r\n\t\tif (keyString.toLowerCase() === this.key.toLowerCase()) {\r\n\t\t\treturn true;\r\n\t\t}\r\n\r\n\t\t// Check if the keyString is an alias for a matching key\r\n\t\tif (Aliases[keyString.toLowerCase()] === this.key.toLowerCase()) {\r\n\t\t\treturn true;\r\n\t\t}\r\n\r\n\t\treturn false;\r\n\t}\r\n}\r\n\r\nexport { KeyPress };\r\n","import { KeyBind } from './KeyBind.js';\nimport { KeyPress } from './KeyPress.js';\n\nconst bindings = new Map();\n/**\n<Map>{\n\t[keyString]: <Map>{\n\t\t[fn]: fnWrapper,\n\t},\n};\n*/\n\nconst defaults = Object.freeze({\n\tallowInInput: false,\n});\n\nconst createFnWrapper = (keyString, fn, opts) => {\n\tconst options = Object.assign({}, defaults, opts);\n\n\tconst keyBind = new KeyBind(keyString);\n\tconst keyLog = [];\n\n\treturn function (e) {\n\t\t// Ignore modifier keys\n\t\tif (['Alt', 'Control', 'Meta', 'Shift'].includes(e.key)) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Don't check key if focus is in a prohibited place\n\t\tif ((!options.allowInInput) && isInput(document.activeElement)) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (isProtected(document.activeElement)) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst keyPress = new KeyPress(e);\n\t\tkeyLog.push(keyPress);\n\n\t\tif (keyLog.length > keyBind.length) {\n\t\t\tkeyLog.shift();\n\t\t}\n\n\t\tif (keyBind.match(keyLog)) {\n\t\t\t// Clear keyLog and call function\n\n\t\t\tkeyLog.splice(0);\n\t\t\tfn.apply(this, arguments);\n\t\t}\n\t};\n};\n\nconst bind = (keyString, fn, options) => {\n\tif (!bindings.has(keyString)) {\n\t\tbindings.set(keyString, new Map());\n\t}\n\n\tconst keyStringBindings = bindings.get(keyString);\n\n\tif (keyStringBindings.has(fn)) {\n\t\t// Do nothing - this binding already exists\n\t\treturn;\n\t}\n\n\tconst fnWrapper = createFnWrapper(keyString, fn, options);\n\n\tdocument.addEventListener('keydown', fnWrapper);\n\tkeyStringBindings.set(fn, fnWrapper);\n};\n\nconst unbind = (keyString, fn) => {\n\tconst keyStringBindings = bindings.get(keyString);\n\n\tif (!keyStringBindings) {\n\t\treturn;\n\t}\n\n\tconst fnWrapper = keyStringBindings.get(fn);\n\n\tdocument.removeEventListener('keydown', fnWrapper);\n\tkeyStringBindings.delete(fn);\n};\n\nconst isInput = function ($element) {\n\tconst nodeName = $element.nodeName.toLowerCase();\n\n\tlet isInput = false;\n\n\tif (['textarea', 'select'].includes(nodeName)) {\n\t\tisInput = true;\n\t} else if (nodeName === 'input') {\n\t\tisInput = true;\n\n\t\tconst inputType = ($element.attributes.type?.value || 'text').toLowerCase();\n\n\t\tif (['button', 'checkbox', 'color', 'file', 'hidden', 'image', 'radio', 'range', 'reset', 'submit'].includes(inputType)) {\n\t\t\tisInput = false;\n\t\t}\n\t} else if ($element.isContentEditable) {\n\t\tisInput = true;\n\t}\n\n\treturn isInput;\n};\n\nconst isProtected = function ($element) {\n\tconst nodeName = $element.nodeName.toLowerCase();\n\n\tlet isProtected = false;\n\n\tif (nodeName === 'input') {\n\t\tconst inputType = ($element.attributes.type?.value || 'text').toLowerCase();\n\n\t\tif (inputType === 'password') {\n\t\t\tisProtected = true;\n\t\t}\n\t}\n\n\treturn isProtected;\n};\n\nexport {\n\tbind,\n\tunbind,\n};\n","/* Tooltip 1.0 */\n\nimport * as keys from 'keybinding';\n\nconst tooltip = (function () {\n\tconst selectors = {\n\t\ttooltip: '.js-tooltip',\n\t\tbody: '.js-tooltip__body'\n\t};\n\n\tconst classes = {\n\t\thidden: 'tooltip--hidden'\n\t};\n\n\tlet initialised = false;\n\n\tconst module = {\n\t\tinit: function () {\n\t\t\tif (initialised === false) {\n\t\t\t\tmodule._initEvents();\n\t\t\t\tmodule._initKeybinding();\n\t\t\t}\n\n\t\t\tinitialised = true;\n\t\t},\n\n\t\t_initEvents: function () {\n\t\t\tlet $tooltips = document.querySelectorAll(selectors.tooltip);\n\n\t\t\t$tooltips.forEach($tooltip => {\n\t\t\t\t$tooltip.addEventListener('mouseleave', module._removeHiddenClassEvent($tooltip));\n\t\t\t\t$tooltip.addEventListener('focusout', module._processTooltipFocusOut);\n\t\t\t});\n\t\t},\n\n\t\t_initKeybinding: function () {\n\t\t\tkeys.bind('escape', module._hideOpenTooltips);\n\t\t},\n\n\t\t_hideOpenTooltips: function () {\n\t\t\tlet $tooltips = module._getOpenTooltips();\n\n\t\t\t$tooltips.forEach($tooltip => {\n\t\t\t\t$tooltip.classList.add(classes.hidden);\n\t\t\t});\n\t\t},\n\n\t\t_removeHiddenClassEvent: function ($tooltip) {\n\t\t\treturn e => {\n\t\t\t\tif (document.activeElement !== $tooltip) {\n\t\t\t\t\tmodule._removeHiddenClass($tooltip);\n\t\t\t\t}\n\t\t\t};\n\t\t},\n\n\t\t_removeHiddenClass: function ($tooltip) {\n\t\t\t$tooltip.classList.remove(classes.hidden);\n\t\t},\n\n\t\t_processTooltipFocusOut: function (e) {\n\t\t\t// Make asynchronous so new activeElement can be detected\n\t\t\twindow.setTimeout(() => {\n\t\t\t\tlet $oldFocus = e.target;\n\t\t\t\tlet $newFocus = document.activeElement;\n\n\t\t\t\tlet $oldTooltip = module._getClosestTooltip($oldFocus);\n\t\t\t\tlet $newTooltip = module._getClosestTooltip($newFocus);\n\n\t\t\t\tif ($oldTooltip !== $newTooltip) {\n\t\t\t\t\tmodule._removeHiddenClass($oldTooltip);\n\t\t\t\t}\n\t\t\t}, 0);\n\t\t},\n\n\t\t_getOpenTooltips: function () {\n\t\t\tlet $openBodies = module._getOpenTooltipBodies();\n\n\t\t\tlet $tooltips = [];\n\t\t\t$openBodies.forEach($el => {\n\t\t\t\tlet $tooltip = module._getClosestTooltip($el);\n\n\t\t\t\tif ($tooltip) {\n\t\t\t\t\t$tooltips.push($tooltip);\n\t\t\t\t} else {\n\t\t\t\t\tconsole.error('Could not find tooltip of open body:', $el);\n\t\t\t\t}\n\t\t\t});\n\n\t\t\treturn $tooltips;\n\t\t},\n\n\t\t_getOpenTooltipBodies: function () {\n\t\t\tlet $bodies = document.querySelectorAll(selectors.body);\n\t\t\tlet $openBodies = Array.from($bodies).filter($el => {\n\t\t\t\treturn $el.offsetParent !== null;\n\t\t\t});\n\n\t\t\treturn $openBodies;\n\t\t},\n\n\t\t_getClosestTooltip: function ($el) {\n\t\t\tlet $tooltip = $el;\n\t\t\twhile ($tooltip && $tooltip.matches(selectors.tooltip) === false) {\n\t\t\t\t$tooltip = $tooltip.parentElement;\n\t\t\t}\n\n\t\t\treturn $tooltip;\n\t\t}\n\t};\n\n\treturn {\n\t\tinit: module.init\n\t};\n})();\n\n// Self-initialise\ntooltip.init();\n\nexport default tooltip;\n"],"sourceRoot":""}