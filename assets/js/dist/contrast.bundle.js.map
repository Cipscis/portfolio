{"version":3,"sources":["webpack://@cipscis/portfolio/./node_modules/@cipscis/activate/dist/activate.js","webpack://@cipscis/portfolio/./app/assets/js/src/contrast/example.js"],"names":["boundEvents","Map","_activator","elements","fn","activator","document","querySelectorAll","e","DOMException","_deactivateSingle","HTMLElement","forEach","element","_activateSingle","TypeError","_getElementBindings","addEventListener","HTMLButtonElement","_getElementHasBindings","_preventSpacebarScroll","spacebarFn","_isSpacebar","call","this","_makeSpacebarFn","bindings","HTMLAnchorElement","enterFn","key","toLowerCase","_isEnter","_makeEnterFn","elementB","get","set","fnB","Object","assign","_rememberElementBindings","removeEventListener","delete","_forgetElementBindings","has","isButton","isInput","HTMLInputElement","HTMLTextAreaElement","isSpacebar","preventDefault","$body","querySelector","classList","contains","remove","add"],"mappings":"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","file":"contrast.bundle.js","sourcesContent":["const boundEvents = new Map();\r\n/**\r\n * Handles the conversion of the elements parameter so the activator function only ever has to deal with single HTMLElements.\r\n *\r\n * @param {string | HTMLElement | NodeListOf<HTMLElement>} elements - A CSS selector string, HTMLElement, or NodeList of HTMLElements to be converted so the activator function is called once for each resulting HTMLElement.\r\n * @param {ActivateEventListener} fn - The event listener to bind to each HTMLElement.\r\n * @param {(element: HTMLElement, fn: ActivateEventListener) => void} activator - The function to link each HTMLElement to fn.\r\n *\r\n * @throws {DOMException} - If the elements argument is an invalid CSS selector string.\r\n */\r\nfunction _activator(elements, fn, activator) {\r\n    // Share the same initial logic between activate and deactivate,\r\n    // but run a different function over each element\r\n    if (typeof elements === 'string') {\r\n        try {\r\n            elements = document.querySelectorAll(elements);\r\n        }\r\n        catch (e) {\r\n            const method = activator === _deactivateSingle ? 'deactivate' : 'activate';\r\n            throw new DOMException(`${method} failed because it was passed an invalid selector string: '${elements}'`);\r\n        }\r\n    }\r\n    if (elements instanceof HTMLElement) {\r\n        activator(elements, fn);\r\n    }\r\n    else {\r\n        elements.forEach((element) => activator(element, fn));\r\n    }\r\n}\r\n/**\r\n * Binds fn to a single element.\r\n *\r\n * @param {HTMLElement} element\r\n * @param {ActivateEventListener} fn\r\n *\r\n * @throws {TypeError} - element must be an HTMLElement.\r\n */\r\nfunction _activateSingle(element, fn) {\r\n    if (!(element instanceof HTMLElement)) {\r\n        throw new TypeError(`activate failed because a valid HTMLElement was not passed`);\r\n    }\r\n    if (_getElementBindings(element, fn)) {\r\n        // Like addEventListener, don't try to rebind new copies of the same events\r\n        return;\r\n    }\r\n    // All nodes should bind the click event\r\n    element.addEventListener('click', fn);\r\n    // Buttons will already treat keyboard events like clicks,\r\n    // so only bind them to other element types\r\n    if (!(element instanceof HTMLButtonElement)) {\r\n        if (_getElementHasBindings(element) === false) {\r\n            // addEventListener would prevent this event being\r\n            // bound multiple times, but be explicit that it is\r\n            // only bound if the element has no other events bound\r\n            element.addEventListener('keydown', _preventSpacebarScroll);\r\n        }\r\n        const spacebarFn = _makeSpacebarFn(fn);\r\n        element.addEventListener('keyup', spacebarFn);\r\n        const bindings = {\r\n            spacebarFn\r\n        };\r\n        // Links already treat \"enter\" keydown like a click\r\n        if (!(element instanceof HTMLAnchorElement)) {\r\n            // Note that holding down \"enter\" will behave differently\r\n            // for links in that it will only fire once, whereas for\r\n            // non-links, including buttons, it will fire multiple times\r\n            const enterFn = _makeEnterFn(fn);\r\n            element.addEventListener('keydown', enterFn);\r\n            bindings.enterFn = enterFn;\r\n        }\r\n        _rememberElementBindings(element, fn, bindings);\r\n    }\r\n}\r\n/**\r\n * Unbinds fn from a single element.\r\n *\r\n * @param {HTMLElement} element\r\n * @param {ActivateEventListener} fn\r\n *\r\n * @throws {TypeError} - element must be an HTMLElement.\r\n */\r\nfunction _deactivateSingle(element, fn) {\r\n    if (!(element instanceof HTMLElement)) {\r\n        throw new TypeError(`deactivate failed because a valid HTMLElement was not passed`);\r\n    }\r\n    // All elements have had a click event bound\r\n    element.removeEventListener('click', fn);\r\n    const bindings = _getElementBindings(element, fn);\r\n    if (!bindings) {\r\n        // No other events to unbind\r\n        return;\r\n    }\r\n    // Buttons will already treat keyboard events like clicks,\r\n    // so they didn't have keyboard events bound to them\r\n    if (!(element instanceof HTMLButtonElement)) {\r\n        if (bindings.spacebarFn) {\r\n            element.removeEventListener('keyup', bindings.spacebarFn);\r\n        }\r\n        // Links already treat \"enter\" keydown like a click,\r\n        // so that event wasn't bound to them\r\n        if (!(element instanceof HTMLAnchorElement)) {\r\n            if (bindings.enterFn) {\r\n                element.removeEventListener('keydown', bindings.enterFn);\r\n            }\r\n        }\r\n        _forgetElementBindings(element, fn);\r\n        if (_getElementHasBindings(element) === false) {\r\n            // Only unbind this event if the element has no other bindings\r\n            element.removeEventListener('keydown', _preventSpacebarScroll);\r\n        }\r\n    }\r\n}\r\n/**\r\n * Record a new set of bindings for a particular element, associated with a new primary binding.\r\n *\r\n * @param {HTMLElement} element\r\n * @param {ActivateEventListener} fn - The primary binding.\r\n * @param {ActivateBinding} bindings - The secondary bindings.\r\n */\r\nfunction _rememberElementBindings(element, fn, bindings) {\r\n    let elementB = boundEvents.get(element);\r\n    if (!elementB) {\r\n        elementB = new Map([[fn, bindings]]);\r\n        boundEvents.set(element, elementB);\r\n    }\r\n    let fnB = elementB.get(fn);\r\n    if (fnB) {\r\n        Object.assign(fnB, bindings);\r\n    }\r\n    else {\r\n        fnB = Object.assign({}, bindings);\r\n        elementB.set(fn, fnB);\r\n    }\r\n}\r\n/**\r\n * Delete any records of bindings for a particular element and primary binding pair.\r\n *\r\n * @param {HTMLElement} element\r\n * @param {ActivateEventListener} fn\r\n */\r\nfunction _forgetElementBindings(element, fn) {\r\n    const elementB = boundEvents.get(element);\r\n    if (!elementB) {\r\n        return;\r\n    }\r\n    elementB.delete(fn);\r\n    boundEvents.delete(element);\r\n}\r\n/**\r\n * Return the bindings for a particular element and primary binding pair.\r\n *\r\n * @param {HTMLElement} element\r\n * @param {ActivateEventListener} fn\r\n */\r\nfunction _getElementBindings(element, fn) {\r\n    const elementB = boundEvents.get(element);\r\n    if (!elementB) {\r\n        return undefined;\r\n    }\r\n    const fnB = elementB.get(fn);\r\n    return fnB;\r\n}\r\n/**\r\n * Checks whether or not any bindings are recorded for a particular element and primary binding pair.\r\n *\r\n * @param  {HTMLElement} element\r\n *\r\n * @return {boolean}\r\n */\r\nfunction _getElementHasBindings(element) {\r\n    return boundEvents.has(element);\r\n}\r\nfunction _makeEnterFn(fn) {\r\n    return function (e) {\r\n        const isEnter = _isEnter(e);\r\n        if (isEnter) {\r\n            return fn.call(this, e);\r\n        }\r\n    };\r\n}\r\n/**\r\n * For a given KeyboardEvent, checks if it was triggered by the 'enter' key.\r\n *\r\n * @param  {KeyboardEvent} e\r\n *\r\n * @return {boolean}\r\n */\r\nfunction _isEnter(e) {\r\n    const isEnter = !!(e.key && (e.key.toLowerCase() === 'enter'));\r\n    return isEnter;\r\n}\r\n/**\r\n * For a given KeyboardEvent, if it was triggered by the 'spacebar' key, prevent the default action of scrolling the page.\r\n *\r\n * @param {KeyboardEvent} e\r\n */\r\nfunction _preventSpacebarScroll(e) {\r\n    // Prevent spacebar from scrolling the page down on keydown\r\n    const element = this;\r\n    // Buttons and inputs don't have this default action of the 'spacebar' key, so don't prevent it.\r\n    const isButton = element instanceof HTMLButtonElement;\r\n    const isInput = element instanceof HTMLInputElement || element instanceof HTMLTextAreaElement;\r\n    const isSpacebar = _isSpacebar(e);\r\n    if (!isButton && !isInput && isSpacebar) {\r\n        e.preventDefault();\r\n    }\r\n}\r\n/**\r\n * Create a secondary binding that calls fn when triggered via the spacebar.\r\n *\r\n * @param {ActivateEventListener} fn\r\n */\r\nfunction _makeSpacebarFn(fn) {\r\n    return function (e) {\r\n        const isSpacebar = _isSpacebar(e);\r\n        if (isSpacebar) {\r\n            return fn.call(this, e);\r\n        }\r\n    };\r\n}\r\n/**\r\n * Checks if a given KeyboardEvent was triggered by the 'spacebar' key.\r\n *\r\n * @param  {KeyboardEvent} e\r\n *\r\n * @return {boolean}\r\n */\r\nfunction _isSpacebar(e) {\r\n    // IE11 uses 'spacebar' instead of ' '\r\n    const isSpacebar = !!(e.key && (e.key === ' ' || e.key.toLowerCase() === 'spacebar'));\r\n    return isSpacebar;\r\n}\r\n/**\r\n * Bind fn to all specified elements.\r\n *\r\n * @param {string | HTMLElement | NodeListOf<HTMLElement>} elements - The elements to have fn bound to them.\r\n * @param {ActivateEventListener} fn - The event listener to bind.\r\n *\r\n * @throws {DOMException} - If the elements argument is an invalid CSS selector string.\r\n */\r\nfunction activate(elements, fn) {\r\n    _activator(elements, fn, _activateSingle);\r\n}\r\n/**\r\n * Unbind fn from all specified elements.\r\n *\r\n * @param {string | HTMLElement | NodeListOf<HTMLElement>} elements - The elements to have fn unbound from them.\r\n * @param {ActivateEventListener} fn - The event listener to unbind.\r\n *\r\n * @throws {DOMException} - If the elements argument is an invalid CSS selector string.\r\n */\r\nfunction deactivate(elements, fn) {\r\n    _activator(elements, fn, _deactivateSingle);\r\n}\r\nexport { activate, deactivate, };\r\nexport default activate;\r\n//# sourceMappingURL=activate.js.map","import { activate } from '@cipscis/activate';\n\nactivate('.js-toggle-dark-mode', () => {\n\tlet $body = document.querySelector('body');\n\tif ($body.classList.contains('dark-mode')) {\n\t\t$body.classList.remove('dark-mode');\n\t} else {\n\t\t$body.classList.add('dark-mode');\n\t}\n});\n"],"sourceRoot":""}