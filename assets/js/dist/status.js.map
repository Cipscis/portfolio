{"version":3,"file":"status.js","mappings":"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","sources":["webpack://@cipscis/portfolio/./node_modules/@cipscis/pubsub/dist/pubsub.js","webpack://@cipscis/portfolio/./app/assets/js/src/status/status.js","webpack://@cipscis/portfolio/./node_modules/@cipscis/activate/dist/activate.js","webpack://@cipscis/portfolio/./app/assets/js/src/status/example.js"],"sourcesContent":["const subscriptions = {};\r\n// Split by whitespace, then remove any empty strings\r\nconst split = (eventString) => eventString.split(/\\s+/).filter(str => !!str);\r\nconst publish = function (event, ...args) {\r\n    const events = split(event);\r\n    if (events.length > 1) {\r\n        for (const event of events) {\r\n            publish.call(this, event, ...args);\r\n        }\r\n    }\r\n    else if (event in subscriptions) {\r\n        const callbacks = subscriptions[event];\r\n        callbacks.forEach((callback) => {\r\n            callback.apply(null, args);\r\n        });\r\n    }\r\n};\r\nconst subscribe = function (event, callback) {\r\n    const events = split(event);\r\n    if (events.length > 1) {\r\n        for (const event of events) {\r\n            subscribe(event, callback);\r\n        }\r\n    }\r\n    else {\r\n        if (!(event in subscriptions)) {\r\n            subscriptions[event] = [];\r\n        }\r\n        const callbacks = subscriptions[event];\r\n        // Don't bind a particular function to an event more than once\r\n        if (callbacks.includes(callback) === false) {\r\n            callbacks.push(callback);\r\n        }\r\n    }\r\n};\r\nconst unsubscribe = function (event, callback) {\r\n    if (event in subscriptions) {\r\n        const callbacks = subscriptions[event];\r\n        const index = callbacks.indexOf(callback);\r\n        if (index !== -1) {\r\n            callbacks.splice(index, 1);\r\n        }\r\n    }\r\n};\r\nexport { publish, subscribe, unsubscribe };\r\n//# sourceMappingURL=pubsub.js.map","/* Status 1.1 */\n\nimport { subscribe } from '@cipscis/pubsub';\n\nconst status = (function (subscribe) {\n\tconst selectors = {\n\t\tstatus: '.js-status',\n\t};\n\n\tconst dataAttributes = {\n\t\tautohide: 'data-autohide-timeout',\n\t};\n\n\tconst events = {\n\t\tsuccess: '/status/success',\n\t\terror: '/status/error',\n\t\thide: '/status/hide',\n\t};\n\n\tconst Types = {\n\t\tSUCCESS: 'SUCCESS',\n\t\tERROR: 'ERROR',\n\t};\n\n\tconst classes = {\n\t\t[Types.SUCCESS]: 'success',\n\t\t[Types.ERROR]: 'error',\n\n\t\thidden: 'hidden',\n\t};\n\n\t// Delay is used for screen reader accessibility.\n\t// Make sure it matches the delay on CSS animations or transitions\n\tconst delay = 100; // ms\n\n\tconst module = {\n\t\t_initSubscriptions: function () {\n\t\t\tif (subscribe) {\n\t\t\t\tsubscribe(events.success, module.success);\n\t\t\t\tsubscribe(events.error, module.error);\n\t\t\t\tsubscribe(events.hide, module.hide);\n\t\t\t}\n\t\t},\n\n\t\t_getEl: function ($status) {\n\t\t\tif (typeof $status === 'string') {\n\t\t\t\t$status = document.querySelector($status);\n\t\t\t} else if ($status instanceof NodeList) {\n\t\t\t\t$status = $status[0];\n\t\t\t} else if (typeof $status === 'undefined') {\n\t\t\t\t$status = document.querySelector(selectors.status);\n\t\t\t}\n\n\t\t\tif (!$status) {\n\t\t\t\tconsole.error('No status element could be found');\n\t\t\t}\n\n\t\t\treturn $status;\n\t\t},\n\n\t\t_clearType: function ($status) {\n\t\t\tfor (let type in Types) {\n\t\t\t\tlet cssClass = classes[type];\n\n\t\t\t\tif ($status.classList.contains(cssClass)) {\n\t\t\t\t\t$status.classList.remove(cssClass);\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\t_setType: function (type, $status) {\n\t\t\tlet cssClass = classes[type];\n\n\t\t\tif (!cssClass) {\n\t\t\t\tconsole.error('No CSS class is defined for status type ' + type);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tmodule._clearType($status);\n\n\t\t\t// Asynchronous so the class gets added back even if it was\n\t\t\t// just removed, ensuring any CSS animation is triggered\n\t\t\twindow.setTimeout(() => $status.classList.add(cssClass), 10);\n\t\t},\n\n\t\t_clearMessage: function ($status) {\n\t\t\t$status.textContent = '';\n\t\t},\n\n\t\t_setMessage: function (message, $status) {\n\t\t\tmodule._clearMessage($status);\n\n\t\t\t// Asynchronous so it can fire after\n\t\t\t// the element becomes visible, and\n\t\t\t// therefore be detected as a change\n\t\t\t// by screen readers.\n\t\t\twindow.setTimeout(() => $status.textContent = message, delay);\n\t\t},\n\n\t\t_show: function (message, type, $status, autohideDelay) {\n\t\t\tmodule._setType(type, $status);\n\t\t\tmodule._setMessage(message, $status);\n\n\t\t\t$status.classList.remove(classes.hidden);\n\n\t\t\tmodule._setAutohide($status, autohideDelay);\n\t\t},\n\n\t\t_setAutohide: function ($status, autohideDelay) {\n\t\t\tmodule._clearAutohide($status);\n\n\t\t\tif (autohideDelay && autohideDelay > 0) {\n\t\t\t\tlet autohideTimeout = window.setTimeout(() => module.hide($status), autohideDelay);\n\t\t\t\t$status.setAttribute(dataAttributes.autohide, autohideTimeout);\n\t\t\t}\n\t\t},\n\n\t\t_clearAutohide: function ($status) {\n\t\t\tlet autohideTimeout = $status.getAttribute(dataAttributes.autohide);\n\n\t\t\tif (autohideTimeout) {\n\t\t\t\twindow.clearTimeout(autohideTimeout);\n\t\t\t\t$status.removeAttribute(dataAttributes.autohide);\n\t\t\t}\n\t\t},\n\n\t\thide: function ($status) {\n\t\t\t$status = module._getEl($status);\n\n\t\t\t$status.classList.add(classes.hidden);\n\t\t\tmodule._clearAutohide($status);\n\t\t},\n\n\t\tsuccess: function (message, $status, autohideDelay) {\n\t\t\t$status = module._getEl($status);\n\n\t\t\tmodule._show(message, Types.SUCCESS, $status, autohideDelay);\n\t\t},\n\n\t\terror: function (message, $status, autohideDelay) {\n\t\t\t$status = module._getEl($status);\n\n\t\t\tmodule._show(message, Types.ERROR, $status, autohideDelay);\n\t\t},\n\t};\n\n\tmodule._initSubscriptions();\n\n\treturn {\n\t\thide: module.hide,\n\t\tsuccess: module.success,\n\t\terror: module.error,\n\t};\n})(subscribe);\n\nexport { status };\nexport default status;\n","const boundEvents = new Map();\r\n/**\r\n * Handles the conversion of the elements parameter so the activator function only ever has to deal with single HTMLElements.\r\n *\r\n * @param {string | HTMLElement | NodeListOf<HTMLElement>} elements - A CSS selector string, HTMLElement, or NodeList of HTMLElements to be converted so the activator function is called once for each resulting HTMLElement.\r\n * @param {ActivateEventListener} fn - The event listener to bind to each HTMLElement.\r\n * @param {(element: HTMLElement, fn: ActivateEventListener) => void} activator - The function to link each HTMLElement to fn.\r\n *\r\n * @throws {DOMException} - If the elements argument is an invalid CSS selector string.\r\n */\r\nfunction _activator(elements, fn, activator) {\r\n    // Share the same initial logic between activate and deactivate,\r\n    // but run a different function over each element\r\n    if (typeof elements === 'string') {\r\n        try {\r\n            elements = document.querySelectorAll(elements);\r\n        }\r\n        catch (e) {\r\n            const method = activator === _deactivateSingle ? 'deactivate' : 'activate';\r\n            throw new DOMException(`${method} failed because it was passed an invalid selector string: '${elements}'`);\r\n        }\r\n    }\r\n    if (elements instanceof HTMLElement) {\r\n        activator(elements, fn);\r\n    }\r\n    else {\r\n        elements.forEach((element) => activator(element, fn));\r\n    }\r\n}\r\n/**\r\n * Binds fn to a single element.\r\n *\r\n * @param {HTMLElement} element\r\n * @param {ActivateEventListener} fn\r\n *\r\n * @throws {TypeError} - element must be an HTMLElement.\r\n */\r\nfunction _activateSingle(element, fn) {\r\n    if (!(element instanceof HTMLElement)) {\r\n        throw new TypeError(`activate failed because a valid HTMLElement was not passed`);\r\n    }\r\n    if (_getElementBindings(element, fn)) {\r\n        // Like addEventListener, don't try to rebind new copies of the same events\r\n        return;\r\n    }\r\n    // All nodes should bind the click event\r\n    element.addEventListener('click', fn);\r\n    // Buttons will already treat keyboard events like clicks,\r\n    // so only bind them to other element types\r\n    if (!(element instanceof HTMLButtonElement)) {\r\n        if (_getElementHasBindings(element) === false) {\r\n            // addEventListener would prevent this event being\r\n            // bound multiple times, but be explicit that it is\r\n            // only bound if the element has no other events bound\r\n            element.addEventListener('keydown', _preventSpacebarScroll);\r\n        }\r\n        const spacebarFn = _makeSpacebarFn(fn);\r\n        element.addEventListener('keyup', spacebarFn);\r\n        const bindings = {\r\n            spacebarFn\r\n        };\r\n        // Links already treat \"enter\" keydown like a click\r\n        if (!(element instanceof HTMLAnchorElement)) {\r\n            // Note that holding down \"enter\" will behave differently\r\n            // for links in that it will only fire once, whereas for\r\n            // non-links, including buttons, it will fire multiple times\r\n            const enterFn = _makeEnterFn(fn);\r\n            element.addEventListener('keydown', enterFn);\r\n            bindings.enterFn = enterFn;\r\n        }\r\n        _rememberElementBindings(element, fn, bindings);\r\n    }\r\n}\r\n/**\r\n * Unbinds fn from a single element.\r\n *\r\n * @param {HTMLElement} element\r\n * @param {ActivateEventListener} fn\r\n *\r\n * @throws {TypeError} - element must be an HTMLElement.\r\n */\r\nfunction _deactivateSingle(element, fn) {\r\n    if (!(element instanceof HTMLElement)) {\r\n        throw new TypeError(`deactivate failed because a valid HTMLElement was not passed`);\r\n    }\r\n    // All elements have had a click event bound\r\n    element.removeEventListener('click', fn);\r\n    const bindings = _getElementBindings(element, fn);\r\n    if (!bindings) {\r\n        // No other events to unbind\r\n        return;\r\n    }\r\n    // Buttons will already treat keyboard events like clicks,\r\n    // so they didn't have keyboard events bound to them\r\n    if (!(element instanceof HTMLButtonElement)) {\r\n        if (bindings.spacebarFn) {\r\n            element.removeEventListener('keyup', bindings.spacebarFn);\r\n        }\r\n        // Links already treat \"enter\" keydown like a click,\r\n        // so that event wasn't bound to them\r\n        if (!(element instanceof HTMLAnchorElement)) {\r\n            if (bindings.enterFn) {\r\n                element.removeEventListener('keydown', bindings.enterFn);\r\n            }\r\n        }\r\n        _forgetElementBindings(element, fn);\r\n        if (_getElementHasBindings(element) === false) {\r\n            // Only unbind this event if the element has no other bindings\r\n            element.removeEventListener('keydown', _preventSpacebarScroll);\r\n        }\r\n    }\r\n}\r\n/**\r\n * Record a new set of bindings for a particular element, associated with a new primary binding.\r\n *\r\n * @param {HTMLElement} element\r\n * @param {ActivateEventListener} fn - The primary binding.\r\n * @param {ActivateBinding} bindings - The secondary bindings.\r\n */\r\nfunction _rememberElementBindings(element, fn, bindings) {\r\n    let elementB = boundEvents.get(element);\r\n    if (!elementB) {\r\n        elementB = new Map([[fn, bindings]]);\r\n        boundEvents.set(element, elementB);\r\n    }\r\n    let fnB = elementB.get(fn);\r\n    if (fnB) {\r\n        Object.assign(fnB, bindings);\r\n    }\r\n    else {\r\n        fnB = Object.assign({}, bindings);\r\n        elementB.set(fn, fnB);\r\n    }\r\n}\r\n/**\r\n * Delete any records of bindings for a particular element and primary binding pair.\r\n *\r\n * @param {HTMLElement} element\r\n * @param {ActivateEventListener} fn\r\n */\r\nfunction _forgetElementBindings(element, fn) {\r\n    const elementB = boundEvents.get(element);\r\n    if (!elementB) {\r\n        return;\r\n    }\r\n    elementB.delete(fn);\r\n    boundEvents.delete(element);\r\n}\r\n/**\r\n * Return the bindings for a particular element and primary binding pair.\r\n *\r\n * @param {HTMLElement} element\r\n * @param {ActivateEventListener} fn\r\n */\r\nfunction _getElementBindings(element, fn) {\r\n    const elementB = boundEvents.get(element);\r\n    if (!elementB) {\r\n        return undefined;\r\n    }\r\n    const fnB = elementB.get(fn);\r\n    return fnB;\r\n}\r\n/**\r\n * Checks whether or not any bindings are recorded for a particular element and primary binding pair.\r\n *\r\n * @param  {HTMLElement} element\r\n *\r\n * @return {boolean}\r\n */\r\nfunction _getElementHasBindings(element) {\r\n    return boundEvents.has(element);\r\n}\r\nfunction _makeEnterFn(fn) {\r\n    return function (e) {\r\n        const isEnter = _isEnter(e);\r\n        if (isEnter) {\r\n            return fn.call(this, e);\r\n        }\r\n    };\r\n}\r\n/**\r\n * For a given KeyboardEvent, checks if it was triggered by the 'enter' key.\r\n *\r\n * @param  {KeyboardEvent} e\r\n *\r\n * @return {boolean}\r\n */\r\nfunction _isEnter(e) {\r\n    const isEnter = !!(e.key && (e.key.toLowerCase() === 'enter'));\r\n    return isEnter;\r\n}\r\n/**\r\n * For a given KeyboardEvent, if it was triggered by the 'spacebar' key, prevent the default action of scrolling the page.\r\n *\r\n * @param {KeyboardEvent} e\r\n */\r\nfunction _preventSpacebarScroll(e) {\r\n    // Prevent spacebar from scrolling the page down on keydown\r\n    const element = this;\r\n    // Buttons and inputs don't have this default action of the 'spacebar' key, so don't prevent it.\r\n    const isButton = element instanceof HTMLButtonElement;\r\n    const isInput = element instanceof HTMLInputElement || element instanceof HTMLTextAreaElement;\r\n    const isSpacebar = _isSpacebar(e);\r\n    if (!isButton && !isInput && isSpacebar) {\r\n        e.preventDefault();\r\n    }\r\n}\r\n/**\r\n * Create a secondary binding that calls fn when triggered via the spacebar.\r\n *\r\n * @param {ActivateEventListener} fn\r\n */\r\nfunction _makeSpacebarFn(fn) {\r\n    return function (e) {\r\n        const isSpacebar = _isSpacebar(e);\r\n        if (isSpacebar) {\r\n            return fn.call(this, e);\r\n        }\r\n    };\r\n}\r\n/**\r\n * Checks if a given KeyboardEvent was triggered by the 'spacebar' key.\r\n *\r\n * @param  {KeyboardEvent} e\r\n *\r\n * @return {boolean}\r\n */\r\nfunction _isSpacebar(e) {\r\n    // IE11 uses 'spacebar' instead of ' '\r\n    const isSpacebar = !!(e.key && (e.key === ' ' || e.key.toLowerCase() === 'spacebar'));\r\n    return isSpacebar;\r\n}\r\n/**\r\n * Bind fn to all specified elements.\r\n *\r\n * @param {string | HTMLElement | NodeListOf<HTMLElement>} elements - The elements to have fn bound to them.\r\n * @param {ActivateEventListener} fn - The event listener to bind.\r\n *\r\n * @throws {DOMException} - If the elements argument is an invalid CSS selector string.\r\n */\r\nfunction activate(elements, fn) {\r\n    _activator(elements, fn, _activateSingle);\r\n}\r\n/**\r\n * Unbind fn from all specified elements.\r\n *\r\n * @param {string | HTMLElement | NodeListOf<HTMLElement>} elements - The elements to have fn unbound from them.\r\n * @param {ActivateEventListener} fn - The event listener to unbind.\r\n *\r\n * @throws {DOMException} - If the elements argument is an invalid CSS selector string.\r\n */\r\nfunction deactivate(elements, fn) {\r\n    _activator(elements, fn, _deactivateSingle);\r\n}\r\nexport { activate, deactivate, };\r\nexport default activate;\r\n//# sourceMappingURL=activate.js.map","import { status } from './status.js';\nimport { activate } from '@cipscis/activate';\n\nactivate('.js-status-example-success', () => status.success('Success :)'));\nactivate('.js-status-example-error', () => status.error('Error :('));\nactivate('.js-status-example-hide', () => status.hide());\n\nactivate('.js-status-example-custom', () => status.success('Custom success :)', '.js-status-custom'));\nactivate('.js-status-example-custom-hide', () => status.hide('.js-status-custom'));\n\nactivate('.js-status-example-autohide', () => status.success('This message will hide in 10 seconds', null, 10000));\n"],"names":["subscriptions","subscribe","event","callback","events","split","filter","str","length","callbacks","includes","push","dataAttributes","Types","SUCCESS","ERROR","classes","hidden","module","_initSubscriptions","success","error","hide","_getEl","$status","document","querySelector","NodeList","console","_clearType","type","cssClass","classList","contains","remove","_setType","window","setTimeout","add","_clearMessage","textContent","_setMessage","message","_show","autohideDelay","_setAutohide","_clearAutohide","autohideTimeout","setAttribute","getAttribute","clearTimeout","removeAttribute","boundEvents","Map","_activator","elements","fn","activator","querySelectorAll","e","DOMException","_deactivateSingle","HTMLElement","forEach","element","_activateSingle","TypeError","_getElementBindings","addEventListener","HTMLButtonElement","_getElementHasBindings","_preventSpacebarScroll","spacebarFn","_isSpacebar","call","this","_makeSpacebarFn","bindings","HTMLAnchorElement","enterFn","isEnter","key","toLowerCase","_isEnter","_makeEnterFn","elementB","get","set","fnB","Object","assign","_rememberElementBindings","removeEventListener","delete","_forgetElementBindings","has","isButton","isInput","HTMLInputElement","HTMLTextAreaElement","isSpacebar","preventDefault","activate"],"sourceRoot":""}